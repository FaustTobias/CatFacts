!function(){"use strict";const t="catfactz-2021-02-26T20:33:31.380Z";let e=["/","/favicon.png","/global.css","/build/bundle.css","/build/bundle.js","/icons/icon-192.png","/icons/icon-512.png"];function n(e){return caches.keys().then((async n=>{for(const s of n)!e&&s.startsWith("temporary-")||s!==t&&await caches.delete(s)}))}async function s(){return(await caches.open(t)).addAll(e)}e=e.map((t=>`/catfactz/${t.slice(1)}`)),self.addEventListener("activate",(t=>{t.waitUntil(n(!0).then((()=>self.clients.claim())))})),self.addEventListener("install",(t=>{t.waitUntil(Promise.all([s(),n(!1)]))})),self.addEventListener("fetch",(t=>{if(t.request.method,t.request.url,"GET"!==t.request.method)return;const n=new URL(t.request.url);if(!n.protocol.startsWith("http"))return;if(n.host===self.location.host&&e.includes(n.pathname))return void t.respondWith(caches.match(t.request));if("only-if-cached"===t.request.cache)return;const s=(new Date).toISOString();t.respondWith(caches.open(`offline-${s}`).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))}))}();
